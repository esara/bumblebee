// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1alpha1

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the probes.bumblebee.io/v1alpha1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the probes.bumblebee.io/v1alpha1 APIs
type Clientset interface {
	// clienset for the probes.bumblebee.io/v1alpha1/v1alpha1 APIs
	Probes() ProbeClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := SchemeBuilder.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the probes.bumblebee.io/v1alpha1/v1alpha1 APIs
func (c *clientSet) Probes() ProbeClient {
	return NewProbeClient(c.client)
}

// Reader knows how to read and list Probes.
type ProbeReader interface {
	// Get retrieves a Probe for the given object key
	GetProbe(ctx context.Context, key client.ObjectKey) (*Probe, error)

	// List retrieves list of Probes for a given namespace and list options.
	ListProbe(ctx context.Context, opts ...client.ListOption) (*ProbeList, error)
}

// ProbeTransitionFunction instructs the ProbeWriter how to transition between an existing
// Probe object and a desired on an Upsert
type ProbeTransitionFunction func(existing, desired *Probe) error

// Writer knows how to create, delete, and update Probes.
type ProbeWriter interface {
	// Create saves the Probe object.
	CreateProbe(ctx context.Context, obj *Probe, opts ...client.CreateOption) error

	// Delete deletes the Probe object.
	DeleteProbe(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given Probe object.
	UpdateProbe(ctx context.Context, obj *Probe, opts ...client.UpdateOption) error

	// Patch patches the given Probe object.
	PatchProbe(ctx context.Context, obj *Probe, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all Probe objects matching the given options.
	DeleteAllOfProbe(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the Probe object.
	UpsertProbe(ctx context.Context, obj *Probe, transitionFuncs ...ProbeTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a Probe object.
type ProbeStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given Probe object.
	UpdateProbeStatus(ctx context.Context, obj *Probe, opts ...client.UpdateOption) error

	// Patch patches the given Probe object's subresource.
	PatchProbeStatus(ctx context.Context, obj *Probe, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on Probes.
type ProbeClient interface {
	ProbeReader
	ProbeWriter
	ProbeStatusWriter
}

type probeClient struct {
	client client.Client
}

func NewProbeClient(client client.Client) *probeClient {
	return &probeClient{client: client}
}

func (c *probeClient) GetProbe(ctx context.Context, key client.ObjectKey) (*Probe, error) {
	obj := &Probe{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *probeClient) ListProbe(ctx context.Context, opts ...client.ListOption) (*ProbeList, error) {
	list := &ProbeList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *probeClient) CreateProbe(ctx context.Context, obj *Probe, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *probeClient) DeleteProbe(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &Probe{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *probeClient) UpdateProbe(ctx context.Context, obj *Probe, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *probeClient) PatchProbe(ctx context.Context, obj *Probe, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *probeClient) DeleteAllOfProbe(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &Probe{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *probeClient) UpsertProbe(ctx context.Context, obj *Probe, transitionFuncs ...ProbeTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*Probe), desired.(*Probe)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *probeClient) UpdateProbeStatus(ctx context.Context, obj *Probe, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *probeClient) PatchProbeStatus(ctx context.Context, obj *Probe, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides ProbeClients for multiple clusters.
type MulticlusterProbeClient interface {
	// Cluster returns a ProbeClient for the given cluster
	Cluster(cluster string) (ProbeClient, error)
}

type multiclusterProbeClient struct {
	client multicluster.Client
}

func NewMulticlusterProbeClient(client multicluster.Client) MulticlusterProbeClient {
	return &multiclusterProbeClient{client: client}
}

func (m *multiclusterProbeClient) Cluster(cluster string) (ProbeClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewProbeClient(client), nil
}
