# Code generated by skv2. DO NOT EDIT.



{{- $bumblebee := $.Values.bumblebee}}
---

{{- define "bumblebee.deploymentSpec"}}

# DaemonSet manifest for bumblebee

apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: bumblebee
  annotations:
    app.kubernetes.io/name: bumblebee
  name: bumblebee
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: bumblebee
  template:
    metadata:
      labels:
        app: bumblebee
      annotations:
        app.kubernetes.io/name: bumblebee
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: bumblebee
      volumes:
      - emptyDir: {}
        name: image-cache
      containers:
{{- $bumblebee := $.Values.bumblebee }}
{{- $bumblebeeImage := $bumblebee.image }}
      - name: bumblebee
        image: {{ $bumblebeeImage.registry }}/{{ $bumblebeeImage.repository }}:{{ $bumblebeeImage.tag }}
        imagePullPolicy: {{ $bumblebeeImage.pullPolicy }}
        args:
        - operator
{{- if $bumblebee.env }}
        env:
{{ toYaml $bumblebee.env | indent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /tmp/image-cache
          name: image-cache
        resources:
{{- if $bumblebee.resources }}
{{ toYaml $bumblebee.resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end}}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ($bumblebee.securityContext) (eq "map[]" (printf "%v" $bumblebee.securityContext)) }}
{{ toYaml $bumblebee.securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary $bumblebee.securityContext true (eq "bool" (printf "%T" $bumblebee.securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $bumblebee.floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $bumblebee.runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end}}
      {{- if $bumblebeeImage.pullSecret }}
      imagePullSecrets:
        - name: {{ $bumblebeeImage.pullSecret }}
      {{- end}}
{{- end }} {{/* define "bumblebee.deploymentSpec" */}}

{{/* Render bumblebee deployment template with overrides from values*/}}
{{- if $bumblebee.enabled }}
{{- $bumblebeeDeploymentOverrides := dict }}
{{- if $bumblebee.deploymentOverrides }}
{{- $bumblebeeDeploymentOverrides = $bumblebee.deploymentOverrides  }}
{{- end }}
---
{{ include "skv2.utils.merge" (list . $bumblebeeDeploymentOverrides "bumblebee.deploymentSpec") }}
{{- end }}
---

{{- if $bumblebee.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: bumblebee
  name: bumblebee
  namespace: {{ $.Release.Namespace }}
{{- end }}


{{- define "bumblebee.serviceSpec"}}

# Service for bumblebee
{{/* Define variables in function scope */}}
{{- $bumblebee := $.Values.bumblebee}}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: bumblebee
  annotations:
    app.kubernetes.io/name: bumblebee
  name: bumblebee
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    app: bumblebee
  type: {{ $bumblebee.serviceType }}
  ports:
  - name: stats
    port: {{ $bumblebee.ports.stats }}

{{- end }} {{/* define "bumblebee.serviceSpec" */}}

{{- if $bumblebee.enabled }}
{{/* Render bumblebee service template with overrides from values*/}}
{{- $bumblebeeServiceOverrides := dict }}
{{- if $bumblebee.serviceOverrides }}
{{- $bumblebeeServiceOverrides = $bumblebee.serviceOverrides  }}
{{- end }}

---

{{ include "skv2.utils.merge" (list . $bumblebeeServiceOverrides "bumblebee.serviceSpec") }}
{{- end }}

---

{{- define "bumblebee.adminServiceSpec"}}

{{- end }} {{/* define "bumblebee.adminServiceSpec" */}}

